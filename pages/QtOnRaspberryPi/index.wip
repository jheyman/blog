---
layout: page
title: Qt On Raspberry Pi
tagline: Qt On Raspberry Pi
tags: Qt raspberry pi
---
{% include JB/setup %}


# COMING SOON !
<!--
## Overview

xxxxx


* TOC
{:toc}



All taken from [this page](https://wiki.qt.io/RaspberryPi2EGLFS#Qt_Creator), but captured here since I tweaked a few things and want to make sure I can redo this install whenever.

I chose to install Qt5.10, on a Raspberry Pi3 Model B+, installed with a Raspbian Stretch desktop image (2018-03-13-raspbian-stretch.img), and am using a Linux host running Ubuntu 16.04 LTS

[Host PC] sudo dd if=2018-03-13-raspbian-stretch.img of=... bs=4M
[RPi] Boot to desktop. From the settings menu, I changed the GPU memory to 256 MB.
[RPi] sudo rpi-update
[RPi] reboot
[RPi] sudo nano /etc/apt/sources.list
[RPi] uncomment the deb-src line, and save.
[RPi] sudo apt-get update
[RPi] sudo apt-get build-dep qt4-x11
[RPi] sudo apt-get build-dep libqt5gui5
[RPi] sudo apt-get install libudev-dev libinput-dev libts-dev libxcb-xinerama0-dev libxcb-xinerama0
[RPi] sudo mkdir /usr/local/qt5pi
[RPi] sudo chown pi:pi /usr/local/qt5pi

[Host PC] mkdir ~/raspi
[Host PC] cd ~/raspi
[Host PC] git clone https://github.com/raspberrypi/tools
[Host PC] mkdir sysroot sysroot/usr sysroot/opt
[Host PC] rsync -avz pi@raspberrypi.local:/lib sysroot
[Host PC] rsync -avz pi@raspberrypi.local:/usr/include sysroot/usr
[Host PC] rsync -avz pi@raspberrypi.local:/usr/lib sysroot/usr
[Host PC] rsync -avz pi@raspberrypi.local:/opt/vc sysroot/opt
[Host PC] wget https://raw.githubusercontent.com/riscv/riscv-poky/priv-1.10/scripts/sysroot-relativelinks.py
[Host PC] chmod +x sysroot-relativelinks.py
[Host PC] ./sysroot-relativelinks.py sysroot
[Host PC] wget http://download.qt.io/official_releases/qt/5.7/5.7.0/single/qt-everywhere-opensource-src-5.7.0.tar.xz
[Host PC] tar xf qt-everywhere-opensource-src-5.7.0.tar.gz
[Host PC] cd qt-everywhere-opensource-src-5.7.0

[Host PC] cd qt-everywhere-src-5.10.1
[Host PC] ./configure -release -skip qtwayland -skip qtlocation -nomake tests -nomake examples -opengl es2 -device linux-rasp-pi3-g++ -device-option CROSS_COMPILE=~/raspi/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/arm-linux-gnueabihf- -sysroot ~/raspi/sysroot -opensource -confirm-license -make libs -prefix /usr/local/qt5pi -extprefix ~/raspi/qt5pi -hostprefix ~/raspi/qt5 -v -no-use-gold-linker



Note: skip QtWayland build to avoid error :

In file included from ../../../../hardwareintegration/compositor/brcm-egl/brcmeglintegration.cpp:55:0:
/home/etabli/raspi/sysroot/opt/vc/include/GLES2/gl2.h:600:125: error: declaration of C function ‘void glShaderSource(GLuint, GLsizei, const GLchar**, const GLint*)’ conflicts with
 GL_APICALL void         GL_APIENTRY glShaderSource (GLuint shader, GLsizei count, const GLchar** string, const GLint* length);
                                                                                                                             ^
In file included from /home/etabli/qt-everywhere-src-5.10.1/qtbase/include/QtGui/../../src/gui/opengl/qopengl.h:105:0,
                 from /home/etabli/qt-everywhere-src-5.10.1/qtbase/include/QtGui/qopengl.h:1,
                 from ../../../../../include/QtWaylandCompositor/../../src/compositor/compositor_api/qwaylandbufferref.h:47,
                 from ../../../../../include/QtWaylandCompositor/qwaylandbufferref.h:1,
                 from ../../../../../include/QtWaylandCompositor/5.10.1/QtWaylandCompositor/private/../../../../../src/compositor/hardware_integration/qwlclientbufferintegration_p.h:56,
                 from ../../../../../include/QtWaylandCompositor/5.10.1/QtWaylandCompositor/private/qwlclientbufferintegration_p.h:1,
                 from ../../../../hardwareintegration/compositor/brcm-egl/brcmeglintegration.h:43,
                 from ../../../../hardwareintegration/compositor/brcm-egl/brcmeglintegration.cpp:40:
/home/etabli/raspi/sysroot/usr/include/GLES3/gl32.h:621:29: error: previous declaration ‘void glShaderSource(GLuint, GLsizei, const GLchar* const*, const GLint*)’ here
 GL_APICALL void GL_APIENTRY glShaderSource (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);)





[Host PC] make -j4 all
[Host PC] make install
(plus trop sur si le sudo est requis ou non)
[Host PC] cd ~/raspi
[Host PC] rsync -avz qt5pi pi@raspberrypi.local:/usr/local


[RPi] echo /usr/local/qt5pi/lib | sudo tee /etc/ld.so.conf.d/00-qt5pi.conf
[RPi] sudo ldconfig
[RPi] sudo mv /usr/lib/arm-linux-gnueabihf/libEGL.so.1.0.0 /usr/lib/arm-linux-gnueabihf/libEGL.so.1.0.0_backup
[RPi] sudo mv /usr/lib/arm-linux-gnueabihf/libGLESv2.so.2.0.0 /usr/lib/arm-linux-gnueabihf/libGLESv2.so.2.0.0_backup
[RPi] sudo ln -s /opt/vc/lib/libEGL.so /usr/lib/arm-linux-gnueabihf/libEGL.so.1.0.0
[RPi] sudo ln -s /opt/vc/lib/libGLESv2.so /usr/lib/arm-linux-gnueabihf/libGLESv2.so.2.0.0
[RPi] sudo ln -s /opt/vc/lib/libEGL.so /opt/vc/lib/libEGL.so.1
[RPi] sudo ln -s /opt/vc/lib/libGLESv2.so /opt/vc/lib/libGLESv2.so.2

to build additional modules if needed:

[Host PC] git clone git://code.qt.io/qt/<qt-module>.git -b <qt-version>
[Host PC] cd <qt-module>
[Host PC] ~/raspi/qt5/bin/qmake -r
[Host PC] make
[Host PC] sudo make install
[Host PC] rsync -avz qt5pi pi@raspberrypi.local:/usr/local





Troubleshooting:
en cas d'erreur côté host du type 
libperl5.22 : Depends: perl-modules-5.22 (>= 5.22.1-9ubuntu0.2) but 5.22.1-9 is to be installed
alors cette action a corrigé le pb:
sudo apt-get  install --reinstall perl-modules-5.22



QTCreator setup ([this](https://www.ics.com/blog/configuring-qt-creator-raspberry-pi) page explains it all)

Go to Options -> Devices
  Add
    Generic Linux Device
    Enter IP address, user & password
    Finish
Go to Options -> Compilers
  Add
    GCC
    Compiler path: ~/raspi/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian/bin/arm-linux-gnueabihf-g++
Go to Options -> Debuggers
  Add
    ~/raspi/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/arm-linux-gnueabihf-gdb
Go to Options -> Qt Versions
  Check if an entry with ~/raspi/qt5/bin/qmake shows up. If not, add it.
  
Go to Options -> Build & Run
  Kits
    Add
      Generic Linux Device
      Device: the one we just created
      Sysroot: ~/raspi/sysroot
      Compiler: the one we just created
      Debugger: the one we just created
      Qt version: the one we saw under Qt Versions
      Qt mkspec: leave empty


INSTALLS        = target
target.files    = widgettest
target.path     = /home/pi


 À la fin du fichier  .pro du projet. 




Compilation de Virtual Keyboard:

https://stackoverflow.com/questions/42576436/how-to-use-the-qtvirtualkeyboard

=> dans QtCreator, naviguer vers qt-everywhere / .... / qtvirtualkeyboard, ouvrir virtualkeyboard.pro, configurer la compi pour Raspi / release, builder.

puis copier à la main:

- tout le répertoire [...]/build-qtvirtualkeyboard-Raspi3_Homehub-Debug/qml/QtQuick/VirtualKeyboard 
vers ~/raspi/qt5pi/qml/QtQuick
- le fichier /home/etabli/qt-everywhere-src-5.10.1/build-qtvirtualkeyboard-Raspi3_Homehub-Debug/plugins/platforminputcontexts/libqtvirtualkeyboardplugin.so
vers ~/raspi/qt5pi/plugins/platforminputcontexts

=> lancement OK sur cible et clavier virtuel OK! (mais compil tjs KO sur Desktop)

Passage du clavier en français:

- ajout de l'option CONFIG+=lang-all dans les options supplémentaires qmake dans QtCreator pour ce projet
- sync/reinstall virtual keyboard sur raspi
- dans le code qml main, ajout de :

        Component.onCompleted: {
            VirtualKeyboardSettings.locale = "fr_FR";
        }


---

## title


![image]({{ site.baseurl }}/assets/images/QtOnRaspberryPi/image.png)


---


## Misc notes

* wwww 

---

## Lessons learned (so far)

* xx


!-->