I"×
<p>This page collects bits of information that I found useful for my own needs, regarding the way an Arduino program is actually compiled, loaded on the board, and how it behaves at runtime</p>

<h3 id="compilation--load-process">Compilation &amp; load process</h3>

<p>A simplified view of the build and load process is as follows:</p>

<p><img src="/assets/images/ArduinoUnderTheHood/Arduino_build_and_load_process.png" alt="Arduino build process" /></p>

<h3 id="memory-model">Memory model</h3>

<p>Most arduino boards have three kinds of memory on board:</p>

<ul>
  <li><strong>EEPROM</strong> (non-volatile) to store e.g. configuration info; 1KB on the Arduino Uno</li>
  <li><strong>Flash</strong> (non-volatile) to store program binary; 32 KB on the Arduino Uno</li>
  <li><strong>SRAM</strong> (volatile) to store variables during program execution; 2KB on the Arduino Uno</li>
</ul>

<p>These are relatively small, but a good fit for the typical usage scenarios of an Arduino. I did face a few cases where I ran out of SRAM, and it bites real hard since the behavior of the chip then becomes quite weird. You would expect it to just crash/freeze, but sometimes it doesnâ€™t and just produces unexpected behaviors.
Since then, I have made an habit of specifically checking how much SRAM I am currently using, to figure out what kind of margin I have left at any time during development.</p>

<p>Here is the code snippet I borrowed to do this:</p>

<pre><code>int freeRam () {
  extern int __heap_start, *__brkval; 
  int v; 
  return (int) &amp;v - (__brkval == 0 ? (int) &amp;__heap_start : (int) __brkval); 
}
</code></pre>

<p>A good tip to <strong>spare some SRAM</strong> is to store all the large read-only buffers in Flash instead. This is possible via the <code>PROGMEM</code> keyword. For example, I used it in the arduino code for my <a href="/pages/LEDMatrixStrip">LEDMatrixStrip</a>:</p>

<pre><code>prog_char alphabet[][8] PROGMEM = {
&lt;large data set here....&gt;
}
</code></pre>

:ET