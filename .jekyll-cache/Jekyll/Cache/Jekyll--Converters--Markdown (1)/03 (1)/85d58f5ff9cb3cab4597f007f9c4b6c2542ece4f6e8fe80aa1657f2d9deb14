I"?
<p>While looking for a VERY simple way to create and store web pages keeping notes on my projects, I checked the Github Pages option and its associate static site generation framework: <a href="http://jekyllrb.com">Jekyll</a>. It looked like the perfect fit, for a person like me with web skills close to zero.</p>

<p>Below are a few notes (to myself) to setup the site building process:</p>

<h3 id="installing-jekyll">Installing jekyll</h3>

<pre><code>sudo apt-get install ruby1.9.1 ruby1.9.1-dev make nodejs rake
sudo gem install jekyll
jekyll new [site name]
cd [site name] 
jekyll serve
</code></pre>

<p>The generated site is then accessible locally via http://localhost:4000
In practice, I used <a href="http://jekyllbootstrap.com/">Jekyll Bootstrap</a> boilerplate to get started.</p>

<h3 id="setting-up-the-hosting-on-github">Setting-up the hosting on github</h3>
<p>Create a repo on github (e.g. blog.git)</p>

<pre><code>mkdir blog
cd blog
git init
git add . --all
git commit -m "initial commit"
git remote add origin https://github.com/[your githubname]/[repo name].git
git push -u origin master 
git branch gh-pages
git checkout gh-pages
</code></pre>

<h3 id="customizing-_configyml">Customizing _config.yml</h3>
<p>Update <code>base_url</code> to http://[your github name].github.io/[repo name]
This is only required because I will no use Github Page‚Äôs built-in jekyll generator, and I require full URLs when generating the site locally.</p>

<h3 id="previewing-the-site-locally">Previewing the site locally</h3>
<p>To generate the static pages and preview them locally</p>

<pre><code>jekyll serve --baseurl=
</code></pre>

<p>The site can then be accessed at <code>localhost://4000</code></p>

<h3 id="updating-the-site-content">Updating the site content</h3>
<p>Github pages hosting offers dynamic jekyll files rendering automatically. However, it does not allow custom plugins. Since I do use some plugins (see below), I chose instead to only push to github the <i>result</i> of the pages generation, not the source markdown/liquid files. To update the site, I just create/edit pages as appropriate, then:</p>

<pre><code>jekyll build
cd publish/blog/
rsync -arv ../../_site/ .
git add . --all
git commit -m "update for XYZ"
git push -u origin gh-pages
</code></pre>

<p>The resulting site is then accessble from http://[your github name].github.io/[repo name]/</p>

<h3 id="generating-a-tagkeyword-index-page">Generating a tag/keyword index page</h3>
<p>Jekyll supports ‚Äútags‚Äù in post articles by default, and is able to generate an index of pages from this tag list very easily.
One just needs to add a <code>tags: </code> line in the YAML front matter of the markdown files.
Unfortunately, when these tags are inserted in <i>pages</i> (i.e. not blog posts), things are not so simple anymore. I finally found an option relying on a custom jekyll plugin, largely based on this great blog entry:</p>

<p><a href="http://brizzled.clapper.org/blog/2010/12/20/some-jekyll-hacks/">http://brizzled.clapper.org/blog/2010/12/20/some-jekyll-hacks/</a></p>

<p>I just modified a few of the plugin files to achieve my purpose:</p>

<h4 id="siterb">site.rb</h4>

<p>In this file, posts tags AND pages tags are concatenated into a single list</p>

<pre><code>module Jekyll
  class Site

    def pages_by_tag
      tag_ref = {}
      temp = self.posts.dup
      temp.concat(self.pages)
      temp.each do |page|  
        page.tags.each do |tag|
          pages = tag_ref.fetch(tag, Array.new)
          pages &lt;&lt; page
          tag_ref[tag] = pages
        end
      end
      tag_ref
    end
  end
end
</code></pre>

<h4 id="pagerb">page.rb</h4>

<p>This hack just lets jekyll understand that for BOTH pages and posts, tags are to be read from a comma-separated list and converted to our custom <code>Jekyll::Tag</code> objects</p>

<pre><code>module Jekyll
	class Page
	    def tags
	        (self.data['tags'] || '').split(',').map {|t| Tag.new(t)}
	    end
	end
	
	class Post
	    def tags
	        (self.data['tags'] || '').split(',').map {|t| Tag.new(t)}
	    end
	end
end
</code></pre>

<h4 id="tagsrb">tags.rb</h4>

<p>The actual work of generating the tag index HTML page is done here.</p>

<pre><code>module Jekyll
  class MyTagIndex &lt; Page
    def initialize(site, base, dir, tags)    
      @site = site
      @base = base
      @dir = dir
      @name = 'tags.html'
      self.process(@name)
      tag_index = (site.config['tag_index_layout'] || 'tag_index') + '.html'
      self.read_yaml(File.join(base, '_layouts'), tag_index)
      self.data['pages_by_tags'] = tags
      self.data['title'] = "Tag index"
    end
  end  	  
  class TagGenerator &lt; Generator
    safe true
    def generate(site)
      if site.layouts.key? 'tag_index'
        dir = "."
        tags = Hash[site.pages_by_tag.sort]
        generate_tag_index(site, dir, tags)           
      end
    end
    def generate_tag_index(site, dir, tags)
      index = MyTagIndex.new(site, site.source, dir, tags)
      index.render(site.layouts, site.site_payload)
      index.write(site.dest)
      site.pages &lt;&lt; index
    end
  end
end
</code></pre>

<h3 id="getting-google-analytics-to-work">Getting google analytics to work</h3>
<p>Jekyll bootstrap includes support for Google Analytics by default, by just adjusting config parameters in the <code>_config.yml</code> file (in the <code>analytics</code> section, set the <code>provider</code> param to ‚Äúgoogle‚Äù and the <code>tracking_id</code> to your custom id).</p>

<p>In my specific context, there is one catch however: since Jekyll Bootstrap is aimed at github-based jekyll rendering, it only activates some of its features if the site generation is done in ‚Äúsafe‚Äù mode (i.e. no plugins allowed). This is the case for the github-based rendering, but is not what I want since I render the site locally to be able to use plugins. So, to still benefit from jekyll boostrap support for google analytics, I hacked the <code>_include/JB/analytics</code> file and removed the <code>if site.safe</code> condition on the first line.</p>

<h3 id="updating-the-theme">Updating the theme</h3>

<p>Custom themes should be placed inside <code>_theme_packages</code> folder, then installed via:</p>

<pre><code>rake theme:install name="THEME-NAME"
</code></pre>

<h3 id="editing-a-custom-theme">Editing a custom theme</h3>

<p>A cool multi-platform tool to compile LESS stylesheets I have been using is <a href="http://koala-app.com/"><strong>Koala</strong></a></p>

<h3 id="using-jekyll-on-windows10">Using jekyll on Windows10</h3>

<p>I followed the instructions for installing Ubuntu‚Äôs <strong>bash</strong> on Windows10, described <a href="https://jekyllrb.com/docs/windows/">here</a>, and got it to work well enough. As indicated, auto-regeneration does not work (i.e. watch option). I use this command line when working from bash on Windows:</p>

<pre><code>jekyll serve --baseurl= --no-watch
</code></pre>

:ET